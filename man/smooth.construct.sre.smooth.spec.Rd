% Generated by roxygen2 (4.1.0): do not edit by hand
% Please edit documentation in R/sre_basis.R
\name{smooth.construct.sre.smooth.spec}
\alias{smooth.construct.sre.smooth.spec}
\title{Smooth Random Effects}
\usage{
smooth.construct.sre.smooth.spec(object, data, knots)
}
\arguments{
\item{object}{A smooth specification object, usually generated by a
term such as \code{s(x,by=t,bs="sre",...)}. In this case \code{x}
is a grouping variable (factor), and \code{t} is the variable over
which the smooth trajectory is to be estimated.}

\item{data}{A list containing just the data (including any \code{by}
variable) required by this term, with names corresponding to
\code{object$term} and \code{object$by}.}

\item{knots}{A list containing any knots supplied for setting up the smooth over
  the \code{"by"} variable.}
}
\description{
Basis constructor to allow for subject-specific smooth effects of a
covariate in a regression model, e.g.
\eqn{Y_{ij} = \beta_0 + \beta_{1i}(t_{ij})}. This can be thought of as
an extension of mixed models for longitudinal data to allow
each subject's curve to be non-linear. Alternatively, it extends
function-on-scalar regression to allow for conditional (subject-specific)
estimates.
}
\details{
To specify a basis for the smooth over the \code{"by"} variable,
 use the \code{xt} argument of \code{s()}, e.g.
 \code{s(x,t,bs="sre", xt="ps")} for p-splines. Any other basis options
 may be entered using the usual arguments of \code{s()}, i.e. \code{k}
 for the basis dimension, \code{m} for the order of the penalty, etc.

 The subject-specific effect \eqn{\beta_{1i}(t_{ij})} is parameterized as
 \eqn{(b_{1k} + b_{1ki}) \phi_k(t_{ij})}. This allows
 \eqn{b_{1k}\phi_k(t_{ij})} to specify the smooth trajectory for a
 "typical" subject (one with all subject-specific effects = 0), and
 \eqn{b_{1ki}\phi_k(t_{ij})} is deviation from that trajectory for subject
 \eqn{i}.
}
\examples{
N <- 100
M <- 10
t <- rep(seq(0,2*pi,length=M), N)
Y <- sin(t) + rep(rnorm(N), each=M) + rnorm(N*M, sd=.2)

dat <- data.frame(Y=Y, t=t, i=factor(rep(1:N, each=M)))
fit <- gam(Y ~ s(i, by=t, bs="sre", k=5), data=dat)
}

